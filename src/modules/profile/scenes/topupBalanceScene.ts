import { Scene } from '@gramio/scenes'
import { InlineKeyboard } from 'gramio'

import type { User } from '@/db/schemes'
import type { PaymentMethodsConfig } from '@/shared/types'

import { db } from '@/db'
import { paymentsTable } from '@/db/schemes'
import { getConfig } from '@/utils/helpers/getConfig'
import { CryptoPayApi } from '@/utils/services/crypto-pay'

const cryptoPay = new CryptoPayApi()

export const topupBalanceScene = new Scene('topupBalanceScene')
	.params<{ user: User }>()
	.step(['message', 'callback_query'], async (ctx) => {
		if (ctx.scene.step.firstTime) {
			return ctx.editText('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é.', {
				reply_markup: new InlineKeyboard()
					.text('üíµ100', '100')
					.text('üíµ500', '200')
					.text('üíµ200', '500')
					.row()
					.add(InlineKeyboard.text('–ù–∞–∑–∞–¥', 'back')),
			})
		}

		if (ctx.is('callback_query')) {
			return ctx.scene.update({
				amount: ctx.queryPayload as number,
			})
		}

		if (ctx.text === '' || Number.isNaN(Number.parseFloat(ctx.text ?? ''))) {
			return ctx.send('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º')
		}

		return await ctx.scene.update({
			amount: ctx.text,
		})
	})
	.step(['callback_query', 'message'], async (ctx) => {
		const paymentMethods = await getConfig<PaymentMethodsConfig>('paymentMethods')

		if (!paymentMethods) {
			return await ctx.send('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞—Ç–µ–∂–µ–π')
		}

		const paymentsLabels = Object.values(paymentMethods.values).filter((x) => x.enabled)

		const keyboard = new InlineKeyboard()
			.columns(2)
			.add(...paymentsLabels.map((x) => InlineKeyboard.text(x.label, x.key)))

		if (ctx.scene.step.firstTime && ctx.is('callback_query')) {
			return await ctx.editText('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', {
				reply_markup: keyboard,
			})
		} else if (ctx.is('message')) {
			return await ctx.send('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', {
				reply_markup: keyboard,
			})
		}

		if (ctx.is('callback_query')) {
			await ctx.answerCallbackQuery()
		}

		if (!paymentMethods.values[ctx.queryPayload as keyof typeof paymentMethods.values]) {
			// await ctx.send('‚ùå–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
			return await ctx.send('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', {
				reply_markup: keyboard,
			})
		}

		return ctx.scene.update({
			paymentMethod: ctx.queryPayload as string,
		})
	})
	.step('callback_query', async (ctx) => {
		if (ctx.scene.step.firstTime) {
			const payment = await db
				.insert(paymentsTable)
				.values({
					userId: ctx.scene.params.user.id,
					amount: ctx.scene.state.amount,
					status: 'pending',
				})
				.returning()

			if (!payment.at(0)) {
				return await ctx.send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞')
			}

			const invoice = await cryptoPay.createInvoice({
				currency_type: 'fiat',
				amount: ctx.scene.state.amount.toString(),
				fiat: 'RUB',
				payload: payment.at(0)!.id.toString(),
			})

			return await ctx.editText('—à–∞–≥ 3', {
				reply_markup: new InlineKeyboard()
					.url('–û–ø–ª–∞—Ç–∏—Ç—å', invoice.result.bot_invoice_url)
					.text('–û—Ç–º–µ–Ω–∞', 'cancel'),
			})
		}

		// if (ctx.queryPayload === 'cancel' && invoceID) {
		// 	console.log('2312312');

		// 	const res = await cryptoPay.deleteInvoice(invoceID)

		// 	console.log(res);

		// }
		ctx.scene.exit()
	})
